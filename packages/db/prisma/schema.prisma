generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum ModelTypeEnum {
  MAN
  WOMAN
  OTHER
}
enum OutputImageStatusEnum {
  PENDING
  GENERATED
  FAILED
}
enum EthnicityEnum {
  WHITE
  BLACK
  ASIAN_AMERICAN
  EAST_ASIAN
  SOUTH_ASIAN
  SOUTH_EAST_ASIAN
  MIDDLE_EASTERN
  PACIFIC
  HISPANIC
}
enum EyeColorEnum {
  BROWN
  BLUE
  HAZEL
  GRAY
}

model User {
  id String @id @default(uuid())
  username String @unique
  profilePicture String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  models Model[]
}

model Model{
  id String @id @default(uuid())
  name String 
  type ModelTypeEnum
  age Int 
  ethnicity EthnicityEnum
  eyeColor EyeColorEnum
  bald Boolean
  trainingImages TrainingImages[]
  outputImages OutputImages[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String
  user User @relation(fields: [userId], references: [id])
}

model TrainingImages{
  id String @id @default(uuid())
  imageurl String
  modelId String
  model Model @relation(fields: [modelId], references: [id])
}

model OutputImages{
  id String @id @default(uuid())
  imageurl String @default("")
modelId String
userId String
prompt String
status OutputImageStatusEnum @default(PENDING)
model Model @relation(fields: [modelId], references: [id])
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
}

model Pack{
  id String @id @default(uuid())
  name String
  prompts PackPrompt[]
}

model PackPrompt {
  id String @id @default(uuid())
  prompt String
  packId String
  pack Pack @relation(fields: [packId], references: [id])
}



